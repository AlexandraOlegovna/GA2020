"""
ClassDesc PROJECT
Tool for generating source code on Python/Java from class description file *.dsc.

Usage:
    class_desc_gen.exe (--input-file=PATH) (--output-dir=PATH) (--target-lan=LANGUAGE)
    class_desc_gen.exe --help

Options:
    -i, --input-file=PATH               Path to class description to generate.
    -o, --output-dir=PATH               Path to the output directory, where the autogenerated files would be saved.
    -l, --target-lan=LANGUAGE           Source code language to generate - now only support `python` and `java`.
    -h, --help                          Show this message.

Mention:
    All generated files would be saved in subdirectory of `--output-dir`.
    Example:
        Command line: class_desc_gen.exe --input-file=./example_dsc.dsc --output-dir=./!RESULTS --target-lan=python
        Results:
            Structure of output directory:

            ./!RESULTS/
            |
            |- example_dsc.dsc
            |- python_autogen/
                |
                |- auto_common/      # package of common context managers and function for autogenerated files
                |- example_dsc.py    # result file with source code on Python Language
"""

import docopt

from class_desc_gen import ClassDescGenSystem
from abstract_class.parser import Parser


def main(opts):
    class_desc_system = ClassDescGenSystem()

    dsc_file_to_process = opts['--input-file']
    lan_to_gen = opts['--target-lan']

    parsed_abstract_class = Parser.parse_abstract_class(dsc_file_to_process)
    class_desc_system.run_plugin_on_abstract_class(abstract_class=parsed_abstract_class,
                                                   dsc_file_path=dsc_file_to_process,
                                                   target_lan=lan_to_gen)


if __name__ == '__main__':
    opts = docopt.docopt(__doc__)
    main(opts)
